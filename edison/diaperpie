#!/usr/bin/env python

from ConfigParser import ConfigParser
from datetime import datetime

import BaseHTTPServer
import bmx055 as hal
import json
import logging
import os
import subprocess
import signal
import sys
import threading
import time
import urllib2

class Accelerometer(object):

    def __init__(self, fake_file = None):
        # initialize accelerometer
        self.acc = hal.bmx055()
        self.acc.init_acc()
        # acc(x,y,z)
        self.data = self.norm(self.acc.get_acc())
        self.weight = 0.8
        self.postures = [
            [0,0,1],  # lying & facing up
            [0,0,-1], # lying & facing down
            [0,1,0],  # standing
            [0,-1,0], # upside down
            [-1,0,0], # lying & facing right
            [1,0,0]   # lying & facing left
        ]
        self.posture_strings = [
            "Facing up",
            "Facing down",
            "Standing",
            "Upside down",
            "Facing right",
            "Facing left"
        ]
        self.exit = False
        self.polling_interval = 0.2
        self.fake_file = fake_file

    @staticmethod
    def norm(data):
        return map(lambda x: float(x)/2047 if x >= 0 else float(x)/2048, data)

    def fake_acc(self, filename):
        logging.debug("Using fake data: %(filename)s" % locals())
        data = []
        with open(filename, 'r') as fake_data:
            for l in fake_data.readlines():
                data.append(map(int, l.split(',')))

        ctr = 0
        while True:
            if ctr >= len(data):
                logging.debug("*** FAKE DATA END ***")
                ctr = 0
#            logging.debug('** %s' % data[ctr])
            yield data[ctr]
            ctr += 1

    @staticmethod
    def mse(p, c):
        return (p[0]-c[0])**2 + (p[1]-c[1])**2 + (p[2]-c[2])**2

    def update(self):
        w, nw = self.weight, 1 - self.weight

        if self.fake_file:
            fake = self.fake_acc(self.fake_file)
        while not self.exit:
            if self.fake_file:
                self.data = map(lambda x, y: x*w+y*nw, self.data, self.norm(fake.next()))
            else:
                self.data = map(lambda x, y: x*w+y*nw, self.data, self.norm(self.acc.get_acc()))
            time.sleep(self.polling_interval)

    def terminate(self):
        self.exit = True

    @property
    def x(self):
        return self.data[0]

    @property
    def y(self):
        return self.data[1]

    @property
    def z(self):
        return self.data[2]

    def dump(self):
        logging.debug('Current accelerometer x,y,z = %s' % self.data)

    def get_posture(self):
        # get MSE of current acc to each postures
        c = self.data
        pos = min(((x,y) for x,y in enumerate(map(lambda p: self.mse(p, c), self.postures))), key=lambda x: x[1])
        logging.debug("Posture = %s, Data = (%.3f,%.3f,%.3f)" % (self.posture_strings[pos[0]], self.data[0], self.data[1], self.data[2]))
        return pos[0]

class SensorServer(BaseHTTPServer.BaseHTTPRequestHandler):
    def do_GET(s):
        """Respond to a GET request."""
        global sensor_stat
        logging.debug("Web from %s: p=%s, w=%s, t=%s" % (s.address_string(),sensor_stat[0], sensor_stat[1], sensor_stat[2]))
        s.send_response(200)
        s.send_header("Content-type", "text/plain")
        s.end_headers()
        s.wfile.write("%s,%s,%.3f" % tuple(sensor_stat))

class ChartServer(BaseHTTPServer.BaseHTTPRequestHandler):
    def do_GET(s):
        """Respond to a GET request."""
        global history_data
        s.send_response(200)
        s.send_header("Content-type", "text/html")
        s.end_headers()

        data = """
        <html>
        <head>
        <script type="text/javascript"
          src="https://www.google.com/jsapi?autoload={
            'modules':[{
              'name':'visualization',
              'version':'1',
              'packages':['corechart']
            }]
          }"></script>

        <script type="text/javascript">
            google.setOnLoadCallback(drawChart);

            function drawChart() {
                var data = google.visualization.arrayToDataTable(%s);

                var options = {
                    title: 'DiaperPie Statistics',
                    curveType: 'function',
                    legend: { position: 'bottom' }
                };

                var chart = new google.visualization.LineChart(document.getElementById('curve_chart'));

            chart.draw(data, options);
        }
        </script>
        </head>
        <body>
            <div id="curve_chart" style="width: 90%%; height: 500px"></div>
        </body>
        </html>
        """ % str(history_data)
        s.wfile.write(data)

def send_to_ble(data):
    cmd_tuple = ["./test-alert", "-r", "simple", "-n", "simple", "1", data]
    logging.debug("Sensor data = %s" % data)
    cmd = subprocess.Popen(cmd_tuple, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    cmd.wait()
    # check status
    if cmd.poll() != 0:
        logging.error("Fail to perform cmd: %s" % " ".join(cmd_tuple))
#        for l in cmd.stderr.readlines():
#            logging.error('\t%s' % l.strip())

def send_to_gcm(s_data):
    global GCM_API_KEY, GCM_ID
    GCM_POST_URL = 'https://android.googleapis.com/gcm/send'
    headers = {}
    headers['Content-Type'] = 'application/json'
    headers['Authorization'] = 'key=%s' % GCM_API_KEY
    data = {}
    data['registration_ids'] = [GCM_ID]
    data['data'] = {'data': s_data}
    data = json.dumps(data)

    # post message to GCM
    try:
        req = urllib2.Request(GCM_POST_URL, data=data, headers=headers)
        resp = urllib2.urlopen(req)
        if resp.code != 200:
            logging.debug('Failed to push notification, status code: %s', resp.code)
        else:
            logging.debug('Success send to GCM')
    except urllib2.HTTPError as e:
        logging.error('Failed to push notification, e: %s', e)

def dummy_terminate_request():
    try:
        urllib2.urlopen('http://127.0.0.1:5678').read()
        urllib2.urlopen('http://127.0.0.1:8888').read()
    except urllib2.HTTPError as e:
        pass

def signal_handler(signal, frame):
    global terminate
    logging.info('Terminating threads...')
    terminate = True

def run_server():
    global terminate
    ip_config = ('', 5678)
    server_class = BaseHTTPServer.HTTPServer
    httpd = server_class(ip_config, SensorServer)
    logging.info("Web service starts - %s:%s" % ip_config)
    while not terminate:
        httpd.handle_request()
    httpd.server_close()

def run_chart_server():
    global terminate
    ip_config = ('', 8888)
    server_class = BaseHTTPServer.HTTPServer
    httpd = server_class(ip_config, ChartServer)
    logging.info("Chart web service starts - %s:%s" % ip_config)
    while not terminate:
        httpd.handle_request()
    httpd.server_close()

if __name__ == "__main__":

    cfg_filename = '/opt/diaperpie/diaperpie.cfg'
    try:
        cfg = ConfigParser()
        if os.path.isfile(cfg_filename):
            cfg.read(cfg_filename)
            ENABLE_GCM = True if cfg.get('gcm', 'enable') == 'true' else False
            GCM_API_KEY = cfg.get('gcm', 'api_key') if ENABLE_GCM else None
            GCM_ID = cfg.get('gcm', 'rx_id') if ENABLE_GCM else None
            ENABLE_BLE = True if cfg.get('ble', 'enable') == 'true' else False
            ENABLE_HTTP = True if cfg.get('http', 'enable') else False
            LOG_PATH = cfg.get('service', 'log_path')
        else:
            ENABLE_GCM = False
            ENABLE_BLE = False
            ENABLE_HTTP = True
            LOG_PATH = None
    except Exception, e:
        print "ERROR: Unable to load configuration from file: %s" % cfg_filename
        print "Exception: %s" % e
        sys.exit(1)

    if not LOG_PATH:
        logging.basicConfig(stream=sys.stdout, level=logging.DEBUG,
                            format='%(asctime)s\t%(levelname)s\t%(message)s',)
    else:
        # we have sufficient storage space @ home instead of /. so write it here
        logging.basicConfig(filename=LOG_PATH, level=logging.DEBUG,
                            format='%(asctime)s\t%(levelname)s\t%(message)s', filemode='a')

    logging.info("=== Start sensor fusion daemon ===")

    if len(sys.argv) >= 2 and os.path.isfile(sys.argv[1]):
        fake_file = sys.argv[1]
        logging.info("Using recorded accelerometer data from file: %(fake_file)s" % locals())

    terminate = False

    # sensor initialization
    sensor_w = hal.water_sensor()
    sensor_temp = hal.temp_sensor()

    polling_inteveral = 1
    threshold_wet = 10

    signal.signal(signal.SIGINT, signal_handler)

    # sensor status
    sensor_stat = [0] * 3

    if ENABLE_HTTP:
        thread_web = threading.Thread(target = run_server)
        thread_web.start()
        thread_web_chart = threading.Thread(target = run_chart_server)
        thread_web_chart.start()

    history_data = [['Time', 'Temperature(Celsius)', 'Wet', 'Wrong posture']]
    acc = Accelerometer()

    try:
        thread_acc = threading.Thread(target = acc.update)
        thread_acc.start()

        # main loop to iterate through sensors
        while not terminate:
            tmp = acc.get_posture(), 1 if sensor_w.get() > threshold_wet else 0, sensor_temp.get()
            # only send when there's difference
            if tmp != sensor_stat:
                str_stat = '%s,%s,%.3f' % tuple(tmp)
                if ENABLE_BLE:
                    send_to_ble(str_stat)
                # send when facing down, upside down, wet or temp > 38
                if ENABLE_GCM and (tmp[0] == 1 or tmp[0] == 3 or tmp[1] == 1 or tmp[2] >= 38):
                    send_to_gcm(str_stat)
                with open('/tmp/sensors', 'w') as f:
                    f.write(str_stat)
                    f.flush()
                sensor_stat = tmp
                logging.debug("sensor data: p=%s, w=%s, t=%s" % (sensor_stat[0], sensor_stat[1], sensor_stat[2]))
            now = datetime.now()
            ts = '%s:%s' % (now.hour, divmod(now.minute,1)[0] * 1)
            if history_data[-1][0] == ts:
                history_data[-1][1] = max(sensor_stat[2], history_data[-1][1])
                history_data[-1][2] = max(sensor_stat[1], history_data[-1][2])
                history_data[-1][3] = max(5 if sensor_stat[0] == 1 or sensor_stat[0] == 3 else 0, history_data[-1][3])
            else:
                history_data.append([ts, sensor_stat[2], 5 if sensor_stat[1] else 0, 5 if sensor_stat[0] == 1 or sensor_stat[0] == 3 else 0])
#            logging.debug(str(history_data[-1]))
            time.sleep(polling_inteveral)

        # stop accelerometetr thread
        acc.terminate()
        thread_acc.join()
        if ENABLE_HTTP:
            dummy_terminate_request()
            thread_web.join()
            thread_web_chart.join()

    except Exception, e:
        logging.error("Exception : %s " % e)

    logging.info('GG')

